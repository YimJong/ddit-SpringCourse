package kr.or.ddit.aop;

import java.lang.reflect.Field;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanPostProcessor;
import org.springframework.util.ReflectionUtils;
import org.springframework.util.ReflectionUtils.FieldCallback;

public class LoggerInjector implements BeanPostProcessor {

	@Override									// 등록이 완료된 빈                                     빈 이름
	public Object postProcessAfterInitialization(Object registedBeanOBJ, String registedBeanName)
			throws BeansException {
		// 루트 컨텍스트 또는 서블릿 컨텍스트 생성하기 위해 활용되는 각각의 설정파일 내 선언된 
		// 빈의 인스턴스화 및 빈 등록이 완료된 직후 콜백되는 메서드 (전체 설정 파일 내 빈 선언된 클래스 각각의 빈 등록 시 마다 콜백됨.)
		// return null; => 빈 등록 취소
		
		return registedBeanOBJ;
	}

	@Override									        // 등록 할 빈
	public Object postProcessBeforeInitialization(Object beforeRegistBeanOBJ, String beforeRegistBeanName)
			throws BeansException {
		
		// 루트 컨텍스트 또는 서블릿 컨텍스트 생성하기 위해 활용되는 각각의 설정파일 내 선언된 
		// 빈의 인스턴스화 및 빈 등록 직전 콜백되는 메서드 (전체 설정 파일 내 빈 선언된 클래스 각각의 빈 등록 시 마다 콜백됨.)
		
		// doWithFields() : 빈 등록 대상의 클래스 내 전체 전역변수를 리스트로 취득.
		//					취득한 전역변수 각각에 접근 시 FieldCallback.doWith(금번에 접근하는 전역 변수)을 활용
		ReflectionUtils.doWithFields(beforeRegistBeanOBJ.getClass(), new FieldCallback() {
			@Override
			public void doWith(Field arg0) throws IllegalArgumentException,
					IllegalAccessException {
				// 해당 전역변수 상단에 @Loggable 선언 여부 파악
				ReflectionUtils.makeAccessible(field);
			}
		});
		
		// return null; => 빈 등록 취소
		return null;
	}

}
