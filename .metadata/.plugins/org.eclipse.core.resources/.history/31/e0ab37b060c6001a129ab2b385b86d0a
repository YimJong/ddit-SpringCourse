<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">
	
	<!-- 
		스프링 프레임워크 IoC(Inversion of Control : 역제어)
			1. 스프링 프레임워크가 관리하는 설정파일 내 선언된 빈들의 인스턴스화 및 제공처 대상 인스턴스를 제공하지 위한 
			      스프링 프레임워크의 핵심 기능
			2. 구분
			   DL(Dependency Lookup) : 설정 파일 내 선언된 빈이 해당 위치에 해당 이름으로 존재 여부 검증
			   DI(Dependency Injection) : 설정 파일 내 선언된 빈의 인스턴스를 제공처에 제공
			   
		컨트롤러 클래스(커맨드 컨트롤러) : 클라이언트의 요청을 실제 처리하는 자원
						자격조건 - 설정파일 내 빈 등록 완료.
					                        해당 자원(커맨드 컨트롤러 클래스) 클래스 선언 상단부에 @Controller 선언 완료.
		컨트롤러 메서드 : 클라이언트의 요청을 실제 처리하는 비지니스 로직을 포함하는 콜백 메서드
			      ▶ 반환타입 : void - 클라이언트 요청 시 서블릿 패스를 기준으로 ViewResolver에 전달 될 값이 추출되어 전달 됨.	
			      	   String - View를 결정하기 위한 문자열을 ViewResolver에 전달.				                 
		bean : id - 다른 빈과 구분을 위해 선언 된 구분자(유니크).
			   name - 1. 단독 선언 시 id속성과 동일한 의미가 부여
			          2. id속성과 동반 선언되면 해당 id의 별명으로 활용
		       class - 해당 자원이 배치된 패키지명과 자원명
		       scope - default.
		                              설정 파일 내 선언된 빈의 인스턴스는 싱글톤 패턴을 적용해 관리되고 제공된다.
               constructor-arg - 해당 빈의 생성자 대상 주입 값 선언
                                              ▶ 주입 순서 = default 선언순서
								 name 속성을 활용한 생성자의 특정 파라미터 선언명 매핑.
								 index 속성을 활용한 생성자에 선언된 파라미터 선언 순서 매핑.
								 ref(reference) 속성을 활용해 설정파일 내 선언된 다른 빈(id속성 값 또는 name속 성값)의 인스턴스를 주입. 
                                              ▶ 네임스페이스 C로 활용가능
               property - 해당 빈 내 전역변수의 setter를 대상으로 주입 값 선언
                                              ▶ 네임스페이스 P로 활용가능
                                              
		어노테이션 : context:component-scan 선언으로 활용
				 @Controller - 커맨드 컨트롤러 자격 부여 조건, 컨트롤러 클래스 상단 선언으로 해당 클래스의 자동 빈 등록 처리.
			     @Service - Service 레이어의 클래스 상단 선언으로 해당 클래스의 자동 빈 등록 처리
			     @Repository - Dao 레이어의 클래스 상단 선언으로 해당 클래스의 자동 빈 등록 처리
			     @Component - 기타 클래스 상단 선언으로 해당 클래스의 자동 빈 등록 처리
			     * 사용 가능 어노테이션 추가
			     	-JSR-250 스펙(JDK6 버전부터 포함)
			     	 @Required - setter 상단에 선언하여 setter 대상 필수 값 주입 선언.
			     	 @Value - 전역변수 상단에 선언하여 properties 파일의 값을 주입할 때 사용.
			     	 @PreDestory - 빈 클래스가 GC되기 직전에 콜백 되어야 하는 메서드 상단에 선언하여 사용.
			     	 @PostConstructor - 빈 클래스가 인스턴스화 된 직후 콜백되어야 하는 메서드 상단에 선언. (ex. 자원 취득용 코드가 필요 할 시)
			     	 @Resource - IoC DI(Dependency Injection)수행
			     	                          선언 가능 영역 : 전역변수 상단, 메서드 상단에 선언
			     	                          빈 클래스의 인스턴스 주입 기준 : 타입을 기준으로 주입 처리
			     	-JSR-330스펙(JDK7 버전부터 포함)
			     	 @Inject - import java-inject-?.?.?.jar가 요구됨.
			     	 		    IoC DI(Dependency Injection)수행
			         		        선언 가능 영역 : 전역변수, 생성자 상단, 메서드 상단에 선언 
			         			빈 클래스의 인스턴스 주입 기준 : 타입을 기준으로 주입 처리
			     	                          
			        -스프링 프레임워크
			         @Autowired - IoC DI(Dependency Injection)수행
			         			    선언 가능 영역 : 전역변수, 생성자 상단, 메서드 상단에 선언 
			         			    빈 클래스의 인스턴스 주입 기준 : 타입을 기준으로 주입 처리
			         @Qualifire - @Autowired와 동반 선언될 수 있음.
			         		            타입이 중복되는 빈 클래스의 인스턴스 주입 시 주입 대상 빈의 빈 등록 시 id 또는 name속성 값을 기준으로 주입 처리
			         		            
			         		  ex) @Service
			         		      class IMemberServiceImpl implements IMemberService extends IService{}
			         		      @Service
			         			  class IFreeboardServiceImpl implements IFreeboardService extends Iservice{}
			         			  
			         			  @Component
			         			  class A{
			         			  	@Autowired (현재 상황에서 주입 받을 빈이 IMemberServiceImpl 인지 IFreeboardServiceImpl 인지 알 수가 없어 에러 발생)
			         			  	@Qualifire("iMemberServiceImpl")	
			         			  	private IService service;
			         			  	
			         			  }	             		
			     @RequestMapping - 클라이언트 요청 시 서블릿 패스와 해당 요청을 처리하는 메서드(컨트롤러 메서드)와의 맵핑 조건
			     
	 -->

	 
<!-- 	<bean id="firstController1" class="kr.or.ddit.first.controller.FirstController"></bean> -->
	<!-- <bean id="memberInfo" name="m1 m2 m3" class="kr.or.ddit.vo.MemberVO"></bean> -->
</beans>
