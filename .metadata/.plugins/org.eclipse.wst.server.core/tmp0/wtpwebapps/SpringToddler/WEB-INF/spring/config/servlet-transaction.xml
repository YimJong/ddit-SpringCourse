<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

	<!-- 
		tx 네임스페이스 필요
		
		스프링 프레임워크 내 트랜잭션 처리 설정 : aop(관점 지향 프로그래밍) 활용
								      어노테이션(@Transactional)활용
								      
		 = DB 질의 중 에러 발생 시 Controller까지 에러가 throws 되고 DispatcherServlet에게 전달.
		   DispatcherServlet에서 트랜잭션 매니저한테 에러 내용 전달.
		      트랜잭션 매니저가 롤백 처리.
		
		      이제 Dao단에서 transaction 처리하면 안됨.
		      										
		      												         클라이언트		  (@Transactional)
		      													   |            
		TransactionManager          DispatcherServlet          Controller          Service          Dao         DB
															    컨트롤러 메서드    =>        메서드            =>    메서드           => 질의 (insert, update...)
			 Commit 		<=						<=		             <=                   <=             <= 정상 질의
		  	 Rollback		<=						<=		             <=                   <=             <= 에러 발생																			 
		  	 
		  	 
		proxy-target-class : true = @Transactional이 상단에 선언된 Service Layer 내 클래스의 메서드가 Interface를 구현하지 않은 경우(cglib 동적으로 해당 메서드의 프로토타입을 추출 자원 활용)
							 false = @Transactional이 상단에 선언된 Service Layer 내 클래스의 메서드가 Interface를 구현한 경우
							 * Dao로 부터 Exception이 서비스 레이어 대상 throws 되면 발생된 익셉션 정보와 @Transactional 설정 정보와
							   @Transactional이 선언된 서비스 레이어의 해당 메서드 원형이 컨트롤러와 DispatcherServlet을 거쳐서 
							      트랜잭션 매니저에 전달로 Commit과 Rollback 처리가 수행. 
							      	 
	 -->
	 
	 <tx:annotation-driven transaction-manager="transactionMGR" proxy-target-class="false"/>
</beans>
