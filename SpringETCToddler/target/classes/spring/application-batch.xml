<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.2.xsd">
	<!-- oxm 추가 -->
<!-- 	<dependency> -->
<!-- 		<groupId>org.springframework</groupId> -->
<!-- 		<artifactId>spring-oxm</artifactId> -->
<!-- 		<version>${spring-framework.version}</version> -->
<!-- 	</dependency> -->
	
	<!-- commit-interval : 컴밋단위 reader의 총 로우가 100건시 commit-interval값이 3일때 3개 로우 리딩 후 컴밋.
	                       실패시 이전 컴밋 단위로 이동 재시작.
	 -->
	<batch:job id="simpleBatchJob">
		<batch:step id="step01" next="step02">
			<batch:tasklet transaction-manager="resTransactionManager">
				<batch:chunk reader="csvItemReader" writer="xmlItemWriter" processor="itemProcessor" commit-interval="3" >
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:step id="step02">
			<batch:tasklet transaction-manager="transactionMgr">
				<batch:chunk reader="csvItemReader" writer="databaseItemWriter" processor="itemProcessor"
					commit-interval="5">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>
	
	<!-- ItemReader 정의 및 세퍼레이팅 맵퍼 선언 -->
	<bean id="csvItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
        <property name="resource" value="classpath:kr/or/ddit/batch/csv/insertLprodInfo.csv"/>
        <property name="lineMapper" ref="lineMapper"/>
    </bean>
    
    <!-- ItemProcessor 정의 -->
    <bean name="itemProcessor" class="kr.or.ddit.batch.processor.CustomProcessor"></bean>

	<!-- XML ItemWriter 정의 -->
	<bean name="xmlItemWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter">
		<property name="resource" value="file:d:\\temp\report.xml"></property>
		<property name="marshaller" ref="reportMarshaller"></property>
	</bean>
    
	<bean name="databaseItemWriter" class="kr.or.ddit.batch.writer.CustomItemWriterDB"></bean>
    
    <!-- Report -->
    <bean name="report" class="kr.or.ddit.batch.report.Report" scope="prototype"></bean>

	<!-- XML Marshaller -->
	<bean name="reportMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		<property name="classesToBeBound">
			<list>
				<value>kr.or.ddit.batch.report.Report</value>
			</list>
		</property>
	</bean>
	
    <!-- 맵퍼 정의 -->
    <bean id="lineMapper" class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
        <property name="lineTokenizer">
            <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                <property name="names" value="lprod_id,lprod_gu,lprod_nm"/>
            </bean>
        </property>
        <property name="fieldSetMapper">
            <bean class="kr.or.ddit.batch.mapper.ReportFieldSetMapper"/>
        </property>
    </bean>
    
    <!-- ResourcelessTransactionManager : commit-interval 선언 값만큼 ItemReader를 통해 Leading된 데이타를 
                                          xml or csv 등의 파일을 대상으로한 ItemWriter 활용시 commit과
                                          rollback 관리를위한 매니저.
     -->
    <bean id="resTransactionManager"
          class="org.springframework.batch.support.transaction.ResourcelessTransactionManager"/>
	
	<!-- MapJobRepositoryFactoryBean : 배치 처리중 정보(JobExecution 정보, StepExecution 정보)를 Map 형태로 메모리에 저장.
	                                   휘발성 SimpleJobRepository 생성 자동화 빈 -->
    <bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
        <property name="transactionManager" ref="resTransactionManager"/>
    </bean>
    
    <!-- 잡 런처 -->
    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository" />
    </bean>

</beans>

